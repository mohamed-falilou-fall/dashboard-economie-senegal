# -*- coding: utf-8 -*-
# app.py

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from sklearn.ensemble import IsolationForest

# Configuration de la page
st.set_page_config(page_title="Tableau de bord - S√©n√©gal", layout="centered")

# CSS pour fond d'√©cran + lisibilit√©
st.markdown("""
    <style>
        body {
            background-image: url("https://www.lemoniteur.fr/mediatheque/8/3/3/002422338_896x598_c.jpeg");
            background-size: cover;
            background-attachment: fixed;
            background-repeat: no-repeat;
            background-position: center;
        }
        .stApp {
            background-color: rgba(0, 0, 0, 0.75);
            padding: 2rem;
            border-radius: 10px;
            color: white !important;
        }
        h1, h2, h3, h4, h5, h6, p, div {
            color: white !important;
        }
        .stMarkdown, .stTextInput, .stSelectbox, .stDataFrame {
            color: white !important;
        }
        .stDataFrame div {
            color: black !important;
        }
    </style>
""", unsafe_allow_html=True)

st.title("Tableau de bord ‚Äì √âcosyst√®me √©conomique du S√©n√©gal (1960 - 2024)")

with st.expander("Pr√©sentation de l'application", expanded=True):
    st.markdown("""
### Application de Data Science & Data Engineering pour l‚Äô√©conomie s√©n√©galaise
#### D√©velopp√©e par **Mohamed Falilou Fall**

Cette application interactive propose une exploration approfondie de **l‚Äô√©cosyst√®me √©conomique du S√©n√©gal** de **1960 √† 2024**, √† partir des donn√©es officielles de la **Banque Mondiale**.

Elle s‚Äôinscrit √† la crois√©e de la **science des donn√©es** et de l‚Äô**ing√©nierie des donn√©es**, en mettant √† disposition un tableau de bord dynamique, con√ßu pour :

-  **Visualiser** l‚Äô√©volution de centaines d‚Äôindicateurs √©conomiques (PIB, inflation, commerce, agriculture, √©ducation, etc.)
-  **Analyser** les tendances structurelles et conjoncturelles sur plus de six d√©cennies
-  **Exporter** les donn√©es pr√™tes √† l‚Äôemploi pour vos rapports, travaux de recherche, politiques publiques ou projets de d√©veloppement

#### Fonctionnalit√©s cl√©s :
- S√©lection d‚Äôun indicateur parmi plus de 400 disponibles
- Graphique interactif retra√ßant l‚Äô√©volution temporelle de l‚Äôindicateur
- Affichage des donn√©es tabulaires brutes
- Option de **t√©l√©chargement direct** du jeu de donn√©es filtr√© (.csv)

---

### Public cible :
- **√âconomistes** et analystes macro√©conomiques
- **Chercheurs** et √©tudiants en sciences sociales
- **D√©cideurs publics**, experts en planification
- **Organisations internationales** et ONG
- **Journalistes √©conomiques**, entrepreneurs, investisseurs

---

### Pourquoi c‚Äôest utile ?
-  Fournit une base factuelle pour la formulation de politiques publiques
-  Permet d‚Äôidentifier des ruptures, tendances ou anomalies historiques
-  Facilite l'int√©gration des donn√©es macro dans des projets de d√©veloppement, des rapports d‚Äôimpact ou des analyses prospectives

---

**Ô∏è Une brique essentielle pour un pilotage √©conomique √©clair√© par la donn√©e, en phase avec les enjeux de transformation structurelle du S√©n√©gal.**
""")

@st.cache_data
def charger_donnees():
    url = r"API_SEN_DS2_en_csv_v2_11156.csv"
    df = pd.read_csv(url, skiprows=4)
    df = df.melt(id_vars=["Country Name", "Country Code", "Indicator Name", "Indicator Code"], 
                 var_name="Year", value_name="Value")
    df = df[df["Country Name"] == "Senegal"]
    df["Year"] = df["Year"].astype(str)
    return df

df_long = charger_donnees()
indicator_list = sorted(df_long['Indicator Name'].dropna().unique())

indicateur_unique = st.selectbox("Choisir un indicateur √©conomique √† visualiser :", indicator_list)
df_filtre = df_long[df_long['Indicator Name'] == indicateur_unique]

if not df_filtre.empty:
    fig = px.line(df_filtre, x="Year", y="Value", color="Indicator Name", 
                  title=f"√âvolution de l‚Äôindicateur : {indicateur_unique}")
    st.plotly_chart(fig)
    st.dataframe(df_filtre)

    csv = df_filtre.to_csv(index=False).encode('utf-8')
    st.download_button("üì• T√©l√©charger les donn√©es de l‚Äôindicateur", 
                       data=csv, 
                       file_name="indicateur_senegal.csv", 
                       mime='text/csv')

    st.subheader(" D√©tection automatique des anomalies")

    st.markdown("""
> Qu'est-ce qu'une anomalie √©conomique ?
>
> Une **anomalie** correspond √† une variation brutale ou inhabituelle dans l‚Äô√©volution d‚Äôun indicateur √©conomique d'une ann√©e √† l'autre.
>
> Elle peut √™tre caus√©e par :
> - Un **choc √©conomique externe** (crise mondiale, flamb√©e des prix)
> - Une **r√©forme politique ou fiscale majeure**
> - Un **changement structurel** dans l‚Äô√©conomie (lib√©ralisation, industrialisation, etc.)
>
> **Exemples :**
> - Une chute brutale du PIB due √† une s√©cheresse
> - Une explosion des importations suite √† une ouverture commerciale
> - Un pic d‚Äôinflation li√© √† une crise mon√©taire
>
>  Le mod√®le utilis√© ici (**Isolation Forest**) identifie automatiquement les ann√©es pr√©sentant des ruptures ou anomalies statistiques dans la s√©rie temporelle.
>
> Ces alertes sont indiqu√©es par le symbole ‚ö†Ô∏è.
    """)

    df_analyse = df_filtre.copy()
    df_analyse = df_analyse[df_analyse["Year"].str.isnumeric()]
    df_analyse["Year"] = df_analyse["Year"].astype(int)
    df_analyse = df_analyse.sort_values("Year")
    df_analyse = df_analyse.dropna(subset=["Value"])

    model = IsolationForest(contamination=0.1, random_state=42)
    df_analyse["Anomaly_Score"] = model.fit_predict(df_analyse[["Value"]])
    df_analyse["Anomalie"] = df_analyse["Anomaly_Score"].apply(lambda x: "‚ö†Ô∏è" if x == -1 else "")

    fig_anomalie = px.line(df_analyse, x="Year", y="Value", title=f"Anomalies d√©tect√©es pour : {indicateur_unique}")
    anomalies = df_analyse[df_analyse["Anomalie"] == "‚ö†Ô∏è"]

    fig_anomalie.add_scatter(x=anomalies["Year"], y=anomalies["Value"],
                             mode='markers+text',
                             text=anomalies["Anomalie"],
                             marker=dict(color='red', size=10),
                             name='Anomalie d√©tect√©e')

    st.plotly_chart(fig_anomalie)
    st.dataframe(df_analyse[["Year", "Value", "Anomalie"]])

else:
    st.warning("Aucune donn√©e pour cet indicateur.")

st.markdown("""
---
**Conceptualis√© et d√©velopp√© par Mohamed Falilou Fall**  
Juin 2025  
üìß Email : [mff.falilou.fall@gmail.com](mailto:mff.falilou.fall@gmail.com)
""")
